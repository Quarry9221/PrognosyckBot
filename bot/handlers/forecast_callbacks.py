import logging
from datetime import datetime
from aiogram.types import CallbackQuery
from bot.keyboards import WeatherKeyboards
from db.database import get_session
from db.crud import get_user_weather_settings, update_user_units


async def forecast_settings_callback(call: CallbackQuery):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    forecast_settings = {
        'forecast_days': settings.forecast_days,
        'past_days': settings.past_days
    }
    
    await call.message.edit_text(
        "üìÖ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É**\n\n"
        f"–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
        f"‚Ä¢ –î–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É: {settings.forecast_days}\n"
        f"‚Ä¢ –ú–∏–Ω—É–ª–∏—Ö –¥–Ω—ñ–≤: {settings.past_days}",
        reply_markup=WeatherKeyboards.forecast_settings(forecast_settings),
        parse_mode="Markdown"
    )


async def forecast_days_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    await call.message.edit_text(
        "üìÖ **–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É:**\n\n"
        "–ú–∞–∫—Å–∏–º—É–º 16 –¥–Ω—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏ Open-Meteo API.",
        reply_markup=WeatherKeyboards.forecast_days_selector(settings.forecast_days),
        parse_mode="Markdown"
    )


async def set_forecast_days_callback(call: CallbackQuery):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É"""
    await call.answer()
    
    _, _, days_str = call.data.split(":", 2)
    days = int(days_str)
    
    try:
        async for session in get_session():
            settings = await get_user_weather_settings(session, call.from_user.id)
            settings.forecast_days = days
            settings.updated_at = datetime.now()
            await session.commit()
        
        await call.answer(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {days} –¥–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É", show_alert=True)
        await forecast_settings_callback(call)
        
    except Exception as e:
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è forecast_days –¥–ª—è {call.from_user.id}: {str(e)}")


async def forecast_past_days_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–∏–Ω—É–ª–∏—Ö –¥–Ω—ñ–≤"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    await call.message.edit_text(
        "üï∞Ô∏è **–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∏–Ω—É–ª–∏—Ö –¥–Ω—ñ–≤:**\n\n"
        "–ú–∞–∫—Å–∏–º—É–º 7 –¥–Ω—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏ Open-Meteo API.",
        reply_markup=WeatherKeyboards.forecast_past_days_selector(settings.past_days),
        parse_mode="Markdown"
    )


async def set_forecast_past_days_callback(call: CallbackQuery):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–∏–Ω—É–ª–∏—Ö –¥–Ω—ñ–≤"""
    await call.answer()
    
    _, _, days_str = call.data.split(":", 2)
    days = int(days_str)
    
    try:
        async for session in get_session():
            await update_user_units(session, call.from_user.id, past_days=days)
        
        await call.answer(f"–ú–∏–Ω—É–ª–∏—Ö –¥–Ω—ñ–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {days}", show_alert=True)
        await forecast_settings_callback(call)
        
    except Exception as e:
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è past_days –¥–ª—è {call.from_user.id}: {str(e)}")
