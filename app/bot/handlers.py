# handlers.py - –ü–æ–∫—Ä–∞—â–µ–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–≥–æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞

import logging
import os
from datetime import datetime
from typing import Optional

from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.db.database import get_session
from app.db.crud import (
    get_or_create_user, get_user_weather_settings, update_user_location,
    update_user_units, toggle_display_setting, get_api_parameters,
    save_user_message, get_user_settings_summary
)
from app.services.geocode import geocode_place
from app.services.weather import get_weather
from app.bot.keyboards import WeatherKeyboards

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
LOG_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "logs")
os.makedirs(LOG_DIR, exist_ok=True)
log_filename = os.path.join(LOG_DIR, f"weather_bot_{datetime.now().strftime('%Y-%m-%d')}.log")
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# FSM —Å—Ç–∞–Ω–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
class SettingsStates(StatesGroup):
    waiting_location = State()
    waiting_elevation = State()
    waiting_notification_time = State()

# ===== –ë–ê–ó–û–í–Ü –û–ë–†–û–ë–ù–ò–ö–ò =====

async def start_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    logging.info(f"/start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    
    async for session in get_session():
        user = await get_or_create_user(
            session,
            message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language_code=message.from_user.language_code
        )
    
    welcome_text = """
üå§Ô∏è **–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–≥–æ–¥–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç!**

üîπ –ù–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏
üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
üîπ –ù–∞–ª–∞—à—Ç—É–π –±–æ—Ç–∞ –ø—ñ–¥ —Å–µ–±–µ –≤ —Ä–æ–∑–¥—ñ–ª—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å

–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞!
    """
    
    await message.reply(
        welcome_text,
        reply_markup=WeatherKeyboards.main_menu(),
        parse_mode="Markdown"
    )

async def help_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
    help_text = """
üÜò **–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –±–æ—Ç—É:**

**–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
‚Ä¢ `/start` - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
‚Ä¢ `/settings` - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
‚Ä¢ `/help` - –¶—è –¥–æ–≤—ñ–¥–∫–∞

**–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
1Ô∏è‚É£ –ù–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏
2Ô∏è‚É£ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
3Ô∏è‚É£ –ù–∞–ª–∞—à—Ç—É–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ —Ä–æ–∑–¥—ñ–ª—ñ "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"

**–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –º—ñ—Å—Ç:**
‚Ä¢ "–ö–∏—ó–≤"
‚Ä¢ "Mukachevo, Ukraine" 
‚Ä¢ "New York, USA"
‚Ä¢ "48.9166, 24.7111" (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏)

**–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**
‚Ä¢ –û–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É (¬∞C/¬∞F, –∫–º/–≥–æ–¥/–º/—Å —Ç–æ—â–æ)
‚Ä¢ –©–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑—ñ
‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É (1-16)
‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è

–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞? –ù–∞–ø–∏—à–∏ @your_support_username
    """
    
    await message.reply(
        help_text,
        reply_markup=WeatherKeyboards.main_menu(),
        parse_mode="Markdown"
    )

async def settings_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /settings"""
    logging.info(f"/settings –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    
    async for session in get_session():
        summary = await get_user_settings_summary(session, message.from_user.id)
    
    await message.reply(
        summary,
        reply_markup=WeatherKeyboards.settings_menu(),
        parse_mode="Markdown"
    )

# ===== –û–ë–†–û–ë–ù–ò–ö–ò –¢–ï–ö–°–¢–£ =====

async def text_handler(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ø–æ—à—É–∫ –ø–æ–≥–æ–¥–∏)"""
    place = message.text.strip()
    logging.info(f"–ó–∞–ø–∏—Ç –ø–æ–≥–æ–¥–∏ –≤—ñ–¥ {message.from_user.id}: '{place}'")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä—É
    await message.bot.send_chat_action(message.chat.id, "typing")
    
    try:
        # –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó
        location_data = await geocode_place(place)
        lat = location_data["lat"]
        lon = location_data["lon"]
        city = location_data.get("city", "")
        state = location_data.get("state", "")
        country = location_data.get("country", "")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        async for session in get_session():
            await update_user_location(
                session, 
                message.from_user.id, 
                lat, lon, 
                location_name=f"{city}, {country}" if city and country else place
            )
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ API
            api_params = await get_api_parameters(session, message.from_user.id)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await save_user_message(
                session,
                message.from_user.id,
                message.chat.id,
                place,
                location_requested=place,
                latitude=lat,
                longitude=lon
            )
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É
        weather_data = await get_weather(lat, lon, api_params)
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = await format_weather_response(weather_data, location_data, api_params)
        
        await message.reply(
            response,
            reply_markup=WeatherKeyboards.weather_type_menu(),
            parse_mode="Markdown"
        )
        
        logging.info(f"–£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id} –¥–ª—è '{place}'")
        
    except ValueError as e:
        error_msg = f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}\n\nüí° **–°–ø—Ä–æ–±—É–π:**\n‚Ä¢ –í–∫–∞–∑–∞—Ç–∏ –º—ñ—Å—Ç–æ —Ç–∞ –∫—Ä–∞—ó–Ω—É\n‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –Ω–∞–∑–≤—É\n‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∞–≤–æ–ø–∏—Å"
        await message.reply(error_msg, parse_mode="Markdown")
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è {message.from_user.id}: {str(e)}")
        
    except Exception as e:
        await message.reply(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
            reply_markup=WeatherKeyboards.main_menu()
        )
        logging.error(f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {message.from_user.id}: {str(e)}", exc_info=True)

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –ú–ï–ù–Æ =====

async def main_menu_callback(call: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await call.answer()
    try:
        await call.message.edit_text(
            "üè† **–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é**\n\n–û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
            reply_markup=WeatherKeyboards.main_menu(),
            parse_mode="Markdown"
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

async def settings_menu_callback(call: CallbackQuery):
    """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    await call.answer()
    async for session in get_session():
        summary = await get_user_settings_summary(session, call.from_user.id)
    try:
        await call.message.edit_text(
            summary,
            reply_markup=WeatherKeyboards.settings_menu(),
            parse_mode="Markdown"
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ =====

async def location_settings_callback(call: CallbackQuery):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó"""
    await call.answer()
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    location_info = "‚ùå –õ–æ–∫–∞—Ü—ñ—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    if settings.latitude and settings.longitude:
        location_info = f"üìç **–ü–æ—Ç–æ—á–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è:**\n{settings.location_name or '–ù–µ–≤—ñ–¥–æ–º–∞ –Ω–∞–∑–≤–∞'}\nüåê {settings.latitude:.4f}, {settings.longitude:.4f}\nüïê –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: {settings.timezone}"
    text = f"üåç **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó**\n\n{location_info}"
    try:
        await call.message.edit_text(
            text,
            reply_markup=WeatherKeyboards.location_settings(),
            parse_mode="Markdown"
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

async def units_settings_callback(call: CallbackQuery):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—å –≤–∏–º—ñ—Ä—É"""
    await call.answer()
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    current_units = {
        'temperature_unit': settings.temperature_unit,
        'wind_speed_unit': settings.wind_speed_unit,
        'precipitation_unit': settings.precipitation_unit,
        'timeformat': settings.timeformat
    }
    try:
        await call.message.edit_text(
            "üìè **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—å –≤–∏–º—ñ—Ä—É**\n\n–û–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–º—ñ–Ω–∏:",
            reply_markup=WeatherKeyboards.units_settings(current_units),
            parse_mode="Markdown"
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

async def display_settings_callback(call: CallbackQuery):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    await call.answer()
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    display_settings = {
        'show_temperature': settings.show_temperature,
        'show_feels_like': settings.show_feels_like,
        'show_humidity': settings.show_humidity,
        'show_pressure': settings.show_pressure,
        'show_wind': settings.show_wind,
        'show_precipitation': settings.show_precipitation,
        'show_precipitation_probability': settings.show_precipitation_probability,
        'show_cloud_cover': settings.show_cloud_cover,
        'show_uv_index': settings.show_uv_index,
        'show_visibility': settings.show_visibility,
        'show_daily_temperature': settings.show_daily_temperature,
        'show_sunrise_sunset': settings.show_sunrise_sunset,
        'show_daylight_duration': settings.show_daylight_duration,
    }
    try:
        await call.message.edit_text(
            "üìä **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è**\n\n–í–∏–±–µ—Ä–∏, —â–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑—ñ –ø–æ–≥–æ–¥–∏:",
            reply_markup=WeatherKeyboards.display_settings(display_settings),
            parse_mode="Markdown"
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

# ===== –û–ë–†–û–ë–ù–ò–ö–ò –ü–ï–†–ï–ú–ò–ö–ê–ù–ù–Ø –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ =====

async def toggle_setting_callback(call: CallbackQuery):
    logging.info(f"Toggle callback: {call.data} from user {call.from_user.id}")
    """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –±—É–ª–µ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    await call.answer()
    
    _, setting_name = call.data.split(":", 1)
    
    try:
        async for session in get_session():
            new_value = await toggle_display_setting(session, call.from_user.id, setting_name)
        
        status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_value else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
        await call.answer(f"{setting_name.replace('show_', '').replace('_', ' ').title()}: {status}", show_alert=True)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        if setting_name == "notification_enabled":
            await notifications_settings_callback(call)
        else:
            await display_settings_callback(call)
        logging.info(f"Toggled {setting_name} for user {call.from_user.id}: new value {new_value}")
        
    except ValueError as e:
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)
        logging.error(f"Error toggling {setting_name} for user {call.from_user.id}: {str(e)}")

async def set_unit_callback(call: CallbackQuery):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—å –≤–∏–º—ñ—Ä—É"""
    await call.answer()
    
    _, unit_type, unit_value = call.data.split(":", 2)
    
    try:
        async for session in get_session():
            kwargs = {unit_type: unit_value}
            await update_user_units(session, call.from_user.id, **kwargs)
        
        unit_labels = {
            'temperature_unit': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            'wind_speed_unit': '–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É',
            'precipitation_unit': '–û–ø–∞–¥–∏',
            'timeformat': '–§–æ—Ä–º–∞—Ç —á–∞—Å—É'
        }
        
        await call.answer(f"{unit_labels.get(unit_type, unit_type)}: {unit_value}", show_alert=True)
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –æ–¥–∏–Ω–∏—Ü—å
        await units_settings_callback(call)
        
    except Exception as e:
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {unit_type}={unit_value} –¥–ª—è {call.from_user.id}: {str(e)}")

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

async def format_weather_response(weather_data: dict, location_data: dict, api_params: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –ø–æ–≥–æ–¥–æ—é"""
    city = location_data.get("city", "")
    state = location_data.get("state", "")
    country = location_data.get("country", "")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –ª–æ–∫–∞—Ü—ñ—î—é
    location_str = f"üåç **{city}"
    if state:
        location_str += f", {state}"
    if country:
        location_str += f", {country}"
    location_str += "**\n\n"
    
    response = location_str
    
    # –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞
    current = weather_data.get("current", {})
    if current:
        temp_unit = "¬∞C" if api_params.get('temperature_unit') == 'celsius' else "¬∞F"
        wind_unit = api_params.get('wind_speed_unit', 'kmh')
        
        response += "‚òÄÔ∏è **–ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞:**\n"
        response += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current.get('temperature_2m', 'N/A')}{temp_unit}\n"
        
        if 'apparent_temperature' in current:
            response += f"üå°Ô∏è –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è: {current['apparent_temperature']}{temp_unit}\n"
        
        if 'relative_humidity_2m' in current:
            response += f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {current['relative_humidity_2m']}%\n"
        
        if 'wind_speed_10m' in current:
            response += f"üí® –í—ñ—Ç–µ—Ä: {current['wind_speed_10m']} {wind_unit}\n"
        
        if 'weather_code' in current:
            weather_desc = get_weather_description(current['weather_code'])
            response += f"‚òÅÔ∏è –û–ø–∏—Å: {weather_desc}\n"
        
        response += "\n"
    
    # –î–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
    daily = weather_data.get("daily", {})
    if daily and 'time' in daily:
        response += "üìÖ **–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ:**\n"
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É
        forecast_days = api_params.get('forecast_days')
        try:
            forecast_days = int(forecast_days)
        except (TypeError, ValueError):
            forecast_days = len(daily['time'])
        times = daily['time'][:forecast_days]
        temp_max = daily.get('temperature_2m_max', [])
        temp_min = daily.get('temperature_2m_min', [])
        weather_codes = daily.get('weather_code', [])

        temp_unit = "¬∞C" if api_params.get('temperature_unit') == 'celsius' else "¬∞F"

        for i in range(len(times)):
            date_str = times[i]
            max_temp = temp_max[i] if i < len(temp_max) else "N/A"
            min_temp = temp_min[i] if i < len(temp_min) else "N/A"
            weather_code = weather_codes[i] if i < len(weather_codes) else 0

            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
            try:
                from datetime import datetime
                date_obj = datetime.fromisoformat(date_str)
                day_name = date_obj.strftime("%A")
                day_names = {
                    'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', 'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫', 'Wednesday': '–°–µ—Ä–µ–¥–∞',
                    'Thursday': '–ß–µ—Ç–≤–µ—Ä', 'Friday': '–ü\'—è—Ç–Ω–∏—Ü—è', 'Saturday': '–°—É–±–æ—Ç–∞', 'Sunday': '–ù–µ–¥—ñ–ª—è'
                }
                day_name = day_names.get(day_name, day_name)
                date_formatted = f"{day_name}, {date_obj.strftime('%d.%m')}"
            except:
                date_formatted = date_str

            weather_desc = get_weather_description(weather_code)
            response += f"‚Ä¢ {date_formatted}: {max_temp}¬∞/{min_temp}¬∞ {weather_desc}\n"
    
    return response

# In handlers.py, add after precipitation_unit_callback

async def timeformat_unit_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä —Ñ–æ—Ä–º–∞—Ç—É —á–∞—Å—É"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    await call.message.edit_text(
        "üïí **–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É:**",
        reply_markup=WeatherKeyboards.timeformat_unit_selector(settings.timeformat),
        parse_mode="Markdown"
    )

async def set_timeformat_callback(call: CallbackQuery):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É —á–∞—Å—É"""
    await call.answer()
    
    _, _, timeformat = call.data.split(":", 2)
    
    try:
        async for session in get_session():
            settings = await get_user_weather_settings(session, call.from_user.id)
            settings.timeformat = timeformat
            settings.updated_at = datetime.now()
            await session.commit()
        
        await call.answer(f"–§–æ—Ä–º–∞—Ç —á–∞—Å—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {timeformat}", show_alert=True)
        await units_settings_callback(call)
        
    except Exception as e:
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è timeformat –¥–ª—è {call.from_user.id}: {str(e)}")

def get_weather_description(weather_code: int) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å –ø–æ–≥–æ–¥–∏ –∑–∞ WMO –∫–æ–¥–æ–º"""
    descriptions = {
        0: "‚òÄÔ∏è –Ø—Å–Ω–æ",
        1: "üå§Ô∏è –ü–µ—Ä–µ–≤–∞–∂–Ω–æ —è—Å–Ω–æ", 2: "‚õÖ –ß–∞—Å—Ç–∫–æ–≤–æ —Ö–º–∞—Ä–Ω–æ", 3: "‚òÅÔ∏è –•–º–∞—Ä–Ω–æ",
        45: "üå´Ô∏è –¢—É–º–∞–Ω", 48: "üå´Ô∏è –Ü–Ω–µ–π",
        51: "üå¶Ô∏è –õ–µ–≥–∫–∏–π –¥–æ—â", 53: "üå¶Ô∏è –ü–æ–º—ñ—Ä–Ω–∏–π –¥–æ—â", 55: "üåßÔ∏è –°–∏–ª—å–Ω–∏–π –¥–æ—â",
        56: "üå®Ô∏è –õ–µ–≥–∫–∏–π —Å–Ω—ñ–≥ –∑ –¥–æ—â–µ–º", 57: "üå®Ô∏è –°–Ω—ñ–≥ –∑ –¥–æ—â–µ–º",
        61: "üå¶Ô∏è –õ–µ–≥–∫–∏–π –¥–æ—â", 63: "üå¶Ô∏è –î–æ—â", 65: "üåßÔ∏è –°–∏–ª—å–Ω–∏–π –¥–æ—â",
        66: "üå®Ô∏è –î–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º", 67: "üå®Ô∏è –°–∏–ª—å–Ω–∏–π –¥–æ—â –∑—ñ —Å–Ω—ñ–≥–æ–º",
        71: "‚ùÑÔ∏è –õ–µ–≥–∫–∏–π —Å–Ω—ñ–≥", 73: "‚ùÑÔ∏è –°–Ω—ñ–≥", 75: "‚ùÑÔ∏è –°–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥",
        77: "‚ùÑÔ∏è –°–Ω—ñ–≥–æ–ø–∞–¥",
        80: "üå¶Ô∏è –ó–ª–∏–≤–∏", 81: "‚õàÔ∏è –ì—Ä–æ–∑–∏", 82: "‚õàÔ∏è –°–∏–ª—å–Ω—ñ –≥—Ä–æ–∑–∏",
        85: "‚ùÑÔ∏è –°–Ω—ñ–≥–æ–ø–∞–¥", 86: "‚ùÑÔ∏è –°–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥–æ–ø–∞–¥",
        95: "‚õàÔ∏è –ì—Ä–æ–∑–∞", 96: "‚õàÔ∏è –ì—Ä–æ–∑–∞ –∑ –≥—Ä–∞–¥–æ–º", 99: "‚õàÔ∏è –°–∏–ª—å–Ω–∞ –≥—Ä–æ–∑–∞"
    }
    return descriptions.get(weather_code, f"–ö–æ–¥ {weather_code}")

async def today_weather_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"""
    await call.answer("–û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ...")
    
    try:
        async for session in get_session():
            settings = await get_user_weather_settings(session, call.from_user.id)
            
            if not settings.latitude or not settings.longitude:
                await call.message.edit_text(
                    "‚ùå –õ–æ–∫–∞—Ü—ñ—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏.",
                    reply_markup=WeatherKeyboards.main_menu()
                )
                return
            
            api_params = await get_api_parameters(session, call.from_user.id)
            # –¢–∏–º—á–∞—Å–æ–≤–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            api_params['forecast_days'] = 1
            api_params['daily'] = 'weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset,precipitation_sum,precipitation_probability_max,wind_speed_10m_max'

            weather_data = await get_weather(settings.latitude, settings.longitude, api_params)

            location_data = {
                "city": settings.location_name or "–ù–µ–≤—ñ–¥–æ–º–∞ –ª–æ–∫–∞—Ü—ñ—è",
                "lat": settings.latitude,
                "lon": settings.longitude
            }

            response = await format_weather_response(weather_data, location_data, api_params)

            await call.message.edit_text(
                response,
                reply_markup=WeatherKeyboards.weather_type_menu(),
                parse_mode="Markdown"
            )

    except Exception as e:
        from aiogram.exceptions import TelegramBadRequest
        if isinstance(e, TelegramBadRequest) and "message is not modified" in str(e):
            pass
        else:
            await call.message.edit_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É: {str(e)}",
                reply_markup=WeatherKeyboards.main_menu()
            )
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è {call.from_user.id}: {str(e)}")

async def three_days_weather_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—ñ"""
    await call.answer("–û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—ñ...")
    try:
        async for session in get_session():
            api_params = await get_api_parameters(session, call.from_user.id)
            settings = await get_user_weather_settings(session, call.from_user.id)

        if not settings.latitude or not settings.longitude:
            await call.message.edit_text(
                "‚ùå **–õ–æ–∫–∞—Ü—ñ—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞**\n\n–°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.",
                reply_markup=WeatherKeyboards.location_settings(),
                parse_mode="Markdown"
            )
            return

        # –î–æ–¥–∞—î–º–æ current —ñ daily –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –æ–±–º–µ–∂—É—î–º–æ daily –¥–æ 3 –¥–Ω—ñ–≤
        api_params['current'] = 'temperature_2m,relative_humidity_2m,apparent_temperature,weather_code,wind_speed_10m,wind_direction_10m'
        api_params['forecast_days'] = 3

        weather_data = await get_weather(settings.latitude, settings.longitude, api_params)

        location_data = {
            "city": settings.location_name or "–ù–µ–≤—ñ–¥–æ–º–∞ –ª–æ–∫–∞—Ü—ñ—è",
            "lat": settings.latitude,
            "lon": settings.longitude
        }

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –∞–ª–µ daily –±—É–¥–µ —Ç—ñ–ª—å–∫–∏ 3 –¥–Ω—ñ
        response = await format_weather_response(weather_data, location_data, api_params)

        await call.message.edit_text(
            response,
            reply_markup=WeatherKeyboards.weather_type_menu(),
            parse_mode="Markdown"
        )
    except Exception as e:
        from aiogram.exceptions import TelegramBadRequest
        if isinstance(e, TelegramBadRequest) and "message is not modified" in str(e):
            pass
        else:
            await call.message.edit_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏: {str(e)}",
                reply_markup=WeatherKeyboards.main_menu()
            )

# ===== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í =====

def register_handlers(dp: Dispatcher):
    # === CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –°–ü–û–í–Ü–©–ï–ù–¨ ===
    dp.callback_query.register(edit_notifications_display_callback, lambda c: c.data == "notifications:edit_display")
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(start_handler, Command("start"))
    dp.message.register(help_handler, Command("help"))
    dp.message.register(settings_handler, Command("settings"))
    
    # –¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ø–æ—à—É–∫ –ø–æ–≥–æ–¥–∏)
    dp.message.register(text_handler)
    
    # === CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –ú–ï–ù–Æ ===
    dp.callback_query.register(main_menu_callback, lambda c: c.data == "menu:main")
    dp.callback_query.register(settings_menu_callback, lambda c: c.data == "menu:settings")
    
    # === CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ ===
    dp.callback_query.register(location_settings_callback, lambda c: c.data == "settings:location")
    dp.callback_query.register(units_settings_callback, lambda c: c.data == "settings:units")
    dp.callback_query.register(display_settings_callback, lambda c: c.data == "settings:display")
    
    # === CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –ü–ï–†–ï–ú–ò–ö–ê–ù–ù–Ø ===
    dp.callback_query.register(toggle_setting_callback, lambda c: c.data.startswith("toggle:"))
    dp.callback_query.register(set_unit_callback, lambda c: c.data.startswith("set_unit:"))
    
    # === CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–ì–û–î–ò ===
    dp.callback_query.register(current_weather_callback, lambda c: c.data == "weather:current")
    dp.callback_query.register(weekly_weather_callback, lambda c: c.data == "weather:weekly")
    dp.callback_query.register(hourly_weather_callback, lambda c: c.data == "weather:hourly")
    dp.callback_query.register(today_weather_callback, lambda c: c.data == "weather:today")
    # ===== –î–û–î–ê–¢–ö–û–í–ò–ô CALLBACK: –ü–†–û–ì–ù–û–ó –ù–ê –°–¨–û–ì–û–î–ù–Ü =====
    dp.callback_query.register(three_days_weather_callback, lambda c: c.data == "weather:3days")
    # ===== –î–û–î–ê–¢–ö–û–í–ò–ô CALLBACK: –ü–†–û–ì–ù–û–ó –ù–ê 3 –î–ù–Ü =====

    # === CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –§–û–†–ú–ê–¢–£ –ß–ê–°–£ ===
    dp.callback_query.register(timeformat_unit_callback, lambda call: call.data == "units:timeformat")
    dp.callback_query.register(set_timeformat_callback, lambda call: call.data.startswith("set_unit:timeformat:"))

    
    # === CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –û–î–ò–ù–ò–¶–¨ ===
    dp.callback_query.register(temperature_unit_callback, lambda c: c.data == "units:temperature")
    dp.callback_query.register(wind_speed_unit_callback, lambda c: c.data == "units:wind_speed")
    dp.callback_query.register(precipitation_unit_callback, lambda c: c.data == "units:precipitation")
    
    # === CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –õ–û–ö–ê–¶–Ü–á ===
    dp.callback_query.register(set_location_callback, lambda c: c.data == "location:set")
    dp.callback_query.register(timezone_callback, lambda c: c.data == "location:timezone")
    dp.callback_query.register(set_timezone_callback, lambda c: c.data.startswith("set_timezone:"))
    
    # === CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –ü–†–û–ì–ù–û–ó–£ ===
    dp.callback_query.register(forecast_settings_callback, lambda c: c.data == "settings:forecast")
    dp.callback_query.register(forecast_days_callback, lambda c: c.data == "forecast:days")
    dp.callback_query.register(set_forecast_days_callback, lambda c: c.data.startswith("set_forecast:days:"))
        # === CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –ú–ò–ù–£–õ–ò–• –î–ù–Ü–í ===
    dp.callback_query.register(forecast_past_days_callback, lambda c: c.data == "forecast:past_days")
    dp.callback_query.register(set_forecast_past_days_callback, lambda c: c.data.startswith("set_forecast:past_days:"))
    
    # === CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò –°–ü–û–í–Ü–©–ï–ù–¨ ===
    dp.callback_query.register(notifications_settings_callback, lambda c: c.data == "settings:notifications")
    dp.callback_query.register(notifications_time_callback, lambda c: c.data == "notifications:time")
    
    # === CALLBACK –û–ë–†–û–ë–ù–ò–ö SUMMARY ===
    dp.callback_query.register(settings_summary_callback, lambda c: c.data == "settings:summary")
    
    # === FALLBACK –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö callback ===
    dp.callback_query.register(unknown_callback)

# ===== –î–û–î–ê–¢–ö–û–í–Ü CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def edit_notifications_display_callback(call: CallbackQuery):
    """–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    await call.answer()
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    display_settings = {
        'show_temperature': settings.show_temperature,
        'show_feels_like': settings.show_feels_like,
        'show_humidity': settings.show_humidity,
        'show_pressure': settings.show_pressure,
        'show_wind': settings.show_wind,
        'show_precipitation': settings.show_precipitation,
        'show_precipitation_probability': settings.show_precipitation_probability,
        'show_cloud_cover': settings.show_cloud_cover,
        'show_uv_index': settings.show_uv_index,
        'show_visibility': settings.show_visibility,
        'show_daily_temperature': settings.show_daily_temperature,
        'show_sunrise_sunset': settings.show_sunrise_sunset,
        'show_daylight_duration': settings.show_daylight_duration,
    }
    await call.message.edit_text(
        "üìä **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å**\n\n–í–∏–±–µ—Ä–∏, —â–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö:",
        reply_markup=WeatherKeyboards.display_settings(display_settings),
        parse_mode="Markdown"
    )

async def forecast_past_days_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–∏–Ω—É–ª–∏—Ö –¥–Ω—ñ–≤"""
    await call.answer()
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    await call.message.edit_text(
        "üï∞Ô∏è **–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∏–Ω—É–ª–∏—Ö –¥–Ω—ñ–≤:**\n\n–ú–∞–∫—Å–∏–º—É–º 7 –¥–Ω—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏ Open-Meteo API.",
        reply_markup=WeatherKeyboards.forecast_past_days_selector(settings.past_days),
        parse_mode="Markdown"
    )

async def set_forecast_past_days_callback(call: CallbackQuery):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–∏–Ω—É–ª–∏—Ö –¥–Ω—ñ–≤"""
    await call.answer()
    _, _, days_str = call.data.split(":", 2)
    days = int(days_str)
    try:
        async for session in get_session():
            await update_user_units(session, call.from_user.id, past_days=days)
        await call.answer(f"–ú–∏–Ω—É–ª–∏—Ö –¥–Ω—ñ–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {days}", show_alert=True)
        await forecast_settings_callback(call)
    except Exception as e:
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è past_days –¥–ª—è {call.from_user.id}: {str(e)}")
async def current_weather_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É"""
    await call.answer()
    
    try:
        async for session in get_session():
            api_params = await get_api_parameters(session, call.from_user.id)
            settings = await get_user_weather_settings(session, call.from_user.id)

        if not settings.latitude or not settings.longitude:
            await call.message.edit_text(
                "‚ùå **–õ–æ–∫–∞—Ü—ñ—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞**\n\n–°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.",
                reply_markup=WeatherKeyboards.location_settings(),
                parse_mode="Markdown"
            )
            return

        # –î–æ–¥–∞—î–º–æ current –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏
        api_params['current'] = 'temperature_2m,relative_humidity_2m,apparent_temperature,weather_code,wind_speed_10m,wind_direction_10m'

        weather_data = await get_weather(settings.latitude, settings.longitude, api_params)

        location_data = {
            "city": settings.location_name or "–ù–µ–≤—ñ–¥–æ–º–∞ –ª–æ–∫–∞—Ü—ñ—è",
            "lat": settings.latitude,
            "lon": settings.longitude
        }

        response = await format_weather_response(weather_data, location_data, api_params)

        await call.message.edit_text(
            response,
            reply_markup=WeatherKeyboards.weather_type_menu(),
            parse_mode="Markdown"
        )

    except Exception as e:
        from aiogram.exceptions import TelegramBadRequest
        if isinstance(e, TelegramBadRequest) and "message is not modified" in str(e):
            # –¢–∏—Ö–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ, –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —ñ –Ω–µ –ª–æ–≥—É—î–º–æ
            pass
        else:
            await call.message.edit_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏: {str(e)}",
                reply_markup=WeatherKeyboards.main_menu()
            )
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏ –¥–ª—è {call.from_user.id}: {str(e)}")

async def weekly_weather_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∏–∂–Ω–µ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑"""
    await call.answer("–û—Ç—Ä–∏–º—É—î–º–æ —Ç–∏–∂–Ω–µ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑...")
    await current_weather_callback(call)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—É –∂ –ª–æ–≥—ñ–∫—É

async def hourly_weather_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—á–∞—Å–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑"""
    await call.answer("–ü–æ—á–∞—Å–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–∫–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ", show_alert=True)

async def temperature_unit_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä –æ–¥–∏–Ω–∏—Ü—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    await call.message.edit_text(
        "üå°Ô∏è **–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω–∏—Ü—ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏:**",
        reply_markup=WeatherKeyboards.temperature_unit_selector(settings.temperature_unit),
        parse_mode="Markdown"
    )

async def wind_speed_unit_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä –æ–¥–∏–Ω–∏—Ü—å —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ—Ç—Ä—É"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    await call.message.edit_text(
        "üí® **–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω–∏—Ü—ñ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ—Ç—Ä—É:**",
        reply_markup=WeatherKeyboards.wind_speed_unit_selector(settings.wind_speed_unit),
        parse_mode="Markdown"
    )

async def precipitation_unit_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä –æ–¥–∏–Ω–∏—Ü—å –æ–ø–∞–¥—ñ–≤"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    precipitation_keyboard = [
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if settings.precipitation_unit == 'mm' else '‚ö™'} –ú—ñ–ª—ñ–º–µ—Ç—Ä–∏ (–º–º)", 
            callback_data="set_unit:precipitation_unit:mm"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if settings.precipitation_unit == 'inch' else '‚ö™'} –î—é–π–º–∏ (inch)", 
            callback_data="set_unit:precipitation_unit:inch"
        )],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:units")]
    ]
    
    await call.message.edit_text(
        "üåßÔ∏è **–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω–∏—Ü—ñ –æ–ø–∞–¥—ñ–≤:**",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=precipitation_keyboard),
        parse_mode="Markdown"
    )

async def set_location_callback(call: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó"""
    await call.answer()
    
    await call.message.edit_text(
        "üìç **–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó**\n\n"
        "–ù–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "‚Ä¢ –ö–∏—ó–≤\n"
        "‚Ä¢ Mukachevo, Ukraine\n"
        "‚Ä¢ 48.9166, 24.7111\n\n"
        "–ê–±–æ –Ω–∞–¥—ñ—à–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–µ–Ω–Ω—è.",
        reply_markup=WeatherKeyboards.location_input_help(),
        parse_mode="Markdown"
    )
    
    await state.set_state(SettingsStates.waiting_location)

async def timezone_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É"""
    await call.answer()
    
    await call.message.edit_text(
        "üïê **–û–±–µ—Ä—ñ—Ç—å —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:**\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä.",
        reply_markup=WeatherKeyboards.timezone_selector(),
        parse_mode="Markdown"
    )

async def set_timezone_callback(call: CallbackQuery):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É"""
    await call.answer()
    
    _, timezone = call.data.split(":", 1)
    
    try:
        async for session in get_session():
            settings = await get_user_weather_settings(session, call.from_user.id)
            settings.timezone = timezone
            settings.updated_at = datetime.now()
            await session.commit()
        
        await call.answer(f"–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {timezone}", show_alert=True)
        await location_settings_callback(call)
        
    except Exception as e:
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è timezone –¥–ª—è {call.from_user.id}: {str(e)}")

async def forecast_settings_callback(call: CallbackQuery):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    forecast_settings = {
        'forecast_days': settings.forecast_days,
        'past_days': settings.past_days
    }
    
    await call.message.edit_text(
        "üìÖ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É**\n\n"
        f"–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
        f"‚Ä¢ –î–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É: {settings.forecast_days}\n"
        f"‚Ä¢ –ú–∏–Ω—É–ª–∏—Ö –¥–Ω—ñ–≤: {settings.past_days}",
        reply_markup=WeatherKeyboards.forecast_settings(forecast_settings),
        parse_mode="Markdown"
    )

async def forecast_days_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    await call.message.edit_text(
        "üìÖ **–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É:**\n\n"
        "–ú–∞–∫—Å–∏–º—É–º 16 –¥–Ω—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏ Open-Meteo API.",
        reply_markup=WeatherKeyboards.forecast_days_selector(settings.forecast_days),
        parse_mode="Markdown"
    )

async def set_forecast_days_callback(call: CallbackQuery):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É"""
    await call.answer()
    
    _, _, days_str = call.data.split(":", 2)
    days = int(days_str)
    
    try:
        async for session in get_session():
            settings = await get_user_weather_settings(session, call.from_user.id)
            settings.forecast_days = days
            settings.updated_at = datetime.now()
            await session.commit()
        
        await call.answer(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {days} –¥–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É", show_alert=True)
        await forecast_settings_callback(call)
        
    except Exception as e:
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è forecast_days –¥–ª—è {call.from_user.id}: {str(e)}")

async def notifications_settings_callback(call: CallbackQuery):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    notification_settings = {
        'notification_enabled': settings.notification_enabled,
        'notification_time': settings.notification_time
    }
    
    await call.message.edit_text(
        "üîî **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å**\n\n"
        f"–°—Ç–∞–Ω: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω—ñ' if settings.notification_enabled else '‚ùå –í–∏–º–∫–Ω–µ–Ω—ñ'}\n"
        f"–ß–∞—Å: {settings.notification_time or '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}",
        reply_markup=WeatherKeyboards.notifications_settings(notification_settings),
        parse_mode="Markdown"
    )

async def notifications_time_callback(call: CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —á–∞—Å—É —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    await call.answer()
    await call.message.edit_text(
        "‚è∞ **–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å:**\n\n–ù–∞–ø–∏—à—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:30)",
        reply_markup=WeatherKeyboards.back_button("settings:notifications"),
        parse_mode="Markdown"
    )

async def settings_summary_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    await call.answer()
    
    async for session in get_session():
        summary = await get_user_settings_summary(session, call.from_user.id)
    
    await call.message.edit_text(
        summary,
        reply_markup=WeatherKeyboards.back_button("menu:settings"),
        parse_mode="Markdown"
    )

async def unknown_callback(call: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö callback"""
    await call.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
    logging.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π callback –≤—ñ–¥ {call.from_user.id}: {call.data}")

# ===== –û–ë–†–û–ë–ù–ò–ö–ò FSM –°–¢–ê–ù–Ü–í =====

async def location_input_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó"""
    place = message.text.strip()
    
    try:
        # –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
        location_data = await geocode_place(place)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
        async for session in get_session():
            await update_user_location(
                session,
                message.from_user.id,
                location_data["lat"],
                location_data["lon"],
                location_name=f"{location_data.get('city', '')}, {location_data.get('country', '')}".strip(", "),
                timezone='auto'
            )
        
        await message.reply(
            f"‚úÖ **–õ–æ–∫–∞—Ü—ñ—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
            f"üìç {location_data.get('city', '–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ')}, {location_data.get('country', '')}\n"
            f"üåê {location_data['lat']:.4f}, {location_data['lon']:.4f}",
            reply_markup=WeatherKeyboards.main_menu(),
            parse_mode="Markdown"
        )
        
        await state.clear()
        
    except ValueError as e:
        await message.reply(f"‚ùå {str(e)}\n\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:")
        # –ù–µ –æ—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è FSM –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
def register_fsm_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è FSM –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    dp.message.register(location_input_handler, SettingsStates.waiting_location)