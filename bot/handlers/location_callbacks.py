from datetime import datetime
from aiogram.types import CallbackQuery
from bot.handlers.settings_callbacks import location_settings_callback
from bot.keyboards import WeatherKeyboards
from db.database import get_session
from db.crud import get_user_weather_settings
from aiogram.fsm.context import FSMContext
from bot.states import SettingsStates
from bot.logger_config import logger



async def set_location_callback(call: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó"""
    await call.answer()

    await call.message.edit_text(
        "üìç **–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó**\n\n"
        "–ù–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "‚Ä¢ –ö–∏—ó–≤\n"
        "‚Ä¢ Mukachevo, Ukraine\n"
        "‚Ä¢ 48.9166, 24.7111\n\n"
        "–ê–±–æ –Ω–∞–¥—ñ—à–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–µ–Ω–Ω—è.",
        reply_markup=WeatherKeyboards.location_input_help(),
        parse_mode="Markdown"
    )

    await state.set_state(SettingsStates.waiting_location)


async def timezone_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É"""
    await call.answer()

    await call.message.edit_text(
        "üïê **–û–±–µ—Ä—ñ—Ç—å —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:**\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä.",
        reply_markup=WeatherKeyboards.timezone_selector(),
        parse_mode="Markdown"
    )


async def set_timezone_callback(call: CallbackQuery):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É"""
    await call.answer()

    _, timezone = call.data.split(":", 1)

    try:
        async for session in get_session():
            settings = await get_user_weather_settings(session, call.from_user.id)
            settings.timezone = timezone
            settings.updated_at = datetime.now()
            await session.commit()

        await call.answer(f"–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {timezone}", show_alert=True)
        await location_settings_callback(call)

    except Exception as e:
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è timezone –¥–ª—è {call.from_user.id}: {str(e)}")