# bot/notifications.py
import asyncio
import datetime
from bot.logger_config import logger

from aiogram.enums import ParseMode
from bot.keyboards import WeatherKeyboards
from bot.handlers.utils import format_weather_response
from db.crud import get_api_parameters
from services.weather import get_weather
from db.models import UserWeatherSettings
from db.session import async_session  # —Ç–≤—ñ–π async_sessionmaker
from sqlalchemy import select


async def daily_notifications_scheduler(bot):
    """
    –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –ø–æ–≥–æ–¥—É.
    –ë–µ—Ä–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —É —è–∫–∏—Ö —É–≤—ñ–º–∫–Ω–µ–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Ç–∞ —á–∞—Å —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ –ø–æ—Ç–æ—á–Ω–∏–º.
    """
    while True:
        now = datetime.datetime.now().strftime("%H:%M")
        try:
            async with async_session() as session:
                # –æ—Ç—Ä–∏–º—É—î–º–æ –æ–±‚Äô—î–∫—Ç–∏ UserWeatherSettings
                stmt = select(UserWeatherSettings).where(
                    UserWeatherSettings.notification_enabled.is_(True),
                    UserWeatherSettings.notification_time == now
                )
                result = await session.execute(stmt)
                users_settings = result.scalars().all()  # —Å–ø–∏—Å–æ–∫ ORM –æ–±‚Äô—î–∫—Ç—ñ–≤

                for settings in users_settings:
                    try:
                        api_params = await get_api_parameters(session, settings.user_id)
                        weather_data = await get_weather(
                            settings.latitude,
                            settings.longitude,
                            api_params
                        )

                        location_data = {
                            "city": settings.location_name or "–í–∞—à–∞ –ª–æ–∫–∞—Ü—ñ—è",
                            "lat": settings.latitude,
                            "lon": settings.longitude
                        }

                        response = await format_weather_response(weather_data, location_data, api_params)

                        await bot.send_message(
                            settings.user_id,
                            f"üîî –©–æ–¥–µ–Ω–Ω–∞ –ø–æ–≥–æ–¥–∞:\n\n{response}",
                            reply_markup=WeatherKeyboards.weather_type_menu(),
                            parse_mode=ParseMode.MARKDOWN
                        )
                        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —â–æ–¥–µ–Ω–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {settings.user_id}")

                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {settings.user_id}: {e}")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")

        await asyncio.sleep(60)  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ—Ö–≤–∏–ª–∏–Ω–∏
