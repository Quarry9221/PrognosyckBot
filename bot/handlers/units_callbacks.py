from bot.logger_config import logger
from datetime import datetime
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from bot.handlers.notifications_callbacks import notifications_settings_callback
from bot.handlers.settings_callbacks import display_settings_callback, units_settings_callback
from bot.keyboards import WeatherKeyboards
from db.database import get_session
from db.crud import (
    get_user_weather_settings,
    toggle_display_setting,
    update_user_units
)

async def toggle_setting_callback(call: CallbackQuery):
    logger.info(f"Toggle callback: {call.data} from user {call.from_user.id}")
    """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –±—É–ª–µ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    await call.answer()
    
    _, setting_name = call.data.split(":", 1)
    
    try:
        async for session in get_session():
            new_value = await toggle_display_setting(session, call.from_user.id, setting_name)
        
        status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_value else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
        await call.answer(f"{setting_name.replace('show_', '').replace('_', ' ').title()}: {status}", show_alert=True)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        if setting_name == "notification_enabled":
            await notifications_settings_callback(call)
        else:
            await display_settings_callback(call)
        logger.info(f"Toggled {setting_name} for user {call.from_user.id}: new value {new_value}")
        
    except ValueError as e:
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)
        logger.error(f"Error toggling {setting_name} for user {call.from_user.id}: {str(e)}")


async def set_unit_callback(call: CallbackQuery):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—å –≤–∏–º—ñ—Ä—É"""
    await call.answer()
    
    _, unit_type, unit_value = call.data.split(":", 2)
    
    try:
        async for session in get_session():
            kwargs = {unit_type: unit_value}
            await update_user_units(session, call.from_user.id, **kwargs)
        
        unit_labels = {
            'temperature_unit': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            'wind_speed_unit': '–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É',
            'precipitation_unit': '–û–ø–∞–¥–∏',
            'timeformat': '–§–æ—Ä–º–∞—Ç —á–∞—Å—É'
        }
        
        await call.answer(f"{unit_labels.get(unit_type, unit_type)}: {unit_value}", show_alert=True)
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é –æ–¥–∏–Ω–∏—Ü—å
        await units_settings_callback(call)
        
    except Exception as e:
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è {unit_type}={unit_value} –¥–ª—è {call.from_user.id}: {str(e)}")


async def temperature_unit_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä –æ–¥–∏–Ω–∏—Ü—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    await call.message.edit_text(
        "üå°Ô∏è **–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω–∏—Ü—ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏:**",
        reply_markup=WeatherKeyboards.temperature_unit_selector(settings.temperature_unit),
        parse_mode="Markdown"
    )


async def wind_speed_unit_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä –æ–¥–∏–Ω–∏—Ü—å —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ—Ç—Ä—É"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    await call.message.edit_text(
        "üí® **–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω–∏—Ü—ñ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ—Ç—Ä—É:**",
        reply_markup=WeatherKeyboards.wind_speed_unit_selector(settings.wind_speed_unit),
        parse_mode="Markdown"
    )


async def precipitation_unit_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä –æ–¥–∏–Ω–∏—Ü—å –æ–ø–∞–¥—ñ–≤"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    precipitation_keyboard = [
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if settings.precipitation_unit == 'mm' else '‚ö™'} –ú—ñ–ª—ñ–º–µ—Ç—Ä–∏ (–º–º)", 
            callback_data="set_unit:precipitation_unit:mm"
        )],
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if settings.precipitation_unit == 'inch' else '‚ö™'} –î—é–π–º–∏ (inch)", 
            callback_data="set_unit:precipitation_unit:inch"
        )],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:units")]
    ]
    
    await call.message.edit_text(
        "üåßÔ∏è **–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω–∏—Ü—ñ –æ–ø–∞–¥—ñ–≤:**",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=precipitation_keyboard),
        parse_mode="Markdown"
    )


async def timeformat_unit_callback(call: CallbackQuery):
    """–í–∏–±—ñ—Ä —Ñ–æ—Ä–º–∞—Ç—É —á–∞—Å—É"""
    await call.answer()
    
    async for session in get_session():
        settings = await get_user_weather_settings(session, call.from_user.id)
    
    await call.message.edit_text(
        "üïí **–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É:**",
        reply_markup=WeatherKeyboards.timeformat_unit_selector(settings.timeformat),
        parse_mode="Markdown"
    )


async def set_timeformat_callback(call: CallbackQuery):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É —á–∞—Å—É"""
    await call.answer()
    
    _, _, timeformat = call.data.split(":", 2)
    
    try:
        async for session in get_session():
            settings = await get_user_weather_settings(session, call.from_user.id)
            settings.timeformat = timeformat
            settings.updated_at = datetime.now()
            await session.commit()
        
        await call.answer(f"–§–æ—Ä–º–∞—Ç —á–∞—Å—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {timeformat}", show_alert=True)
        await units_settings_callback(call)
        
    except Exception as e:
        await call.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è timeformat –¥–ª—è {call.from_user.id}: {str(e)}")
