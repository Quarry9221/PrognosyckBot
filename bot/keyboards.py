

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from typing import Dict, Any

class WeatherKeyboards:
    @staticmethod
    def forecast_past_days_selector(current: int = 0) -> InlineKeyboardMarkup:
        keyboard = []
        days_options = [0, 1, 2, 3, 5, 7]
        for days in days_options:
            emoji = "‚úÖ" if current == days else "‚ö™"
            text = f"{emoji} {days} {'–¥–µ–Ω—å' if days == 1 else ('–¥–Ω—ñ' if 1 < days < 5 else '–¥–Ω—ñ–≤' if days > 0 else '–Ω–µ–º–∞—î')}"
            keyboard.append([InlineKeyboardButton(
                text=text,
                callback_data=f"set_forecast:past_days:{days}"
            )])
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:forecast")])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    @staticmethod
    def main_menu() -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(text="üå¶Ô∏è –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞", callback_data="weather:current")],
            [
                InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data="weather:weekly"),
                InlineKeyboardButton(text="‚è∞ –ü–æ—á–∞—Å–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data="weather:hourly")
            ],
            [
                InlineKeyboardButton(text="üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="menu:settings"),
                InlineKeyboardButton(text="üèôÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ", callback_data="action:change_location")
            ],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="action:help")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def settings_menu() -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(text="üìç –õ–æ–∫–∞—Ü—ñ—è —Ç–∞ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å", callback_data="settings:location")],
            [InlineKeyboardButton(text="üìè –û–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É", callback_data="settings:units")],
            [InlineKeyboardButton(text="üìä –©–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏", callback_data="settings:display")],
            [InlineKeyboardButton(text="üìÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="settings:forecast")],
            [InlineKeyboardButton(text="üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="settings:notifications")],
            [InlineKeyboardButton(text="üìã –ú–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings:summary")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def location_settings() -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(text="üåç –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", callback_data="location:set")],
            [InlineKeyboardButton(text="üïê –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å", callback_data="location:timezone")],
            [InlineKeyboardButton(text="‚õ∞Ô∏è –í–∏—Å–æ—Ç–∞ –Ω–∞–¥ —Ä—ñ–≤–Ω–µ–º –º–æ—Ä—è", callback_data="location:elevation")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="menu:settings")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def units_settings(current_units: Dict[str, str] = None) -> InlineKeyboardMarkup:
        if not current_units:
            current_units = {
                'temperature_unit': 'celsius',
                'wind_speed_unit': 'kmh',
                'precipitation_unit': 'mm',
                'timeformat': 'iso8601'
            }
        
        temp_emoji = "üå°Ô∏èC" if current_units['temperature_unit'] == 'celsius' else "üå°Ô∏èF"
        wind_units_map = {'kmh': '–∫–º/–≥–æ–¥', 'ms': '–º/—Å', 'mph': '–º–∏–ª—å/–≥–æ–¥', 'kn': '–≤—É–∑–ª–∏'}
        wind_emoji = f"üí® {wind_units_map.get(current_units['wind_speed_unit'], current_units['wind_speed_unit'])}"
        precip_emoji = "üåßÔ∏è–º–º" if current_units['precipitation_unit'] == 'mm' else "üåßÔ∏è–¥—é–π–º–∏"
        
        keyboard = [
            [InlineKeyboardButton(text=f"{temp_emoji} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", callback_data="units:temperature")],
            [InlineKeyboardButton(text=f"{wind_emoji} –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É", callback_data="units:wind_speed")],
            [InlineKeyboardButton(text=f"{precip_emoji} –û–ø–∞–¥–∏", callback_data="units:precipitation")],
            [InlineKeyboardButton(text="üïí –§–æ—Ä–º–∞—Ç —á–∞—Å—É", callback_data="units:timeformat")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="menu:settings")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def temperature_unit_selector(current: str = 'celsius') -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(
                text=f"{'‚úÖ' if current == 'celsius' else '‚ö™'} –¶–µ–ª—å—Å—ñ–π (¬∞C)", 
                callback_data="set_unit:temperature_unit:celsius"
            )],
            [InlineKeyboardButton(
                text=f"{'‚úÖ' if current == 'fahrenheit' else '‚ö™'} –§–∞—Ä–µ–Ω–≥–µ–π—Ç (¬∞F)", 
                callback_data="set_unit:temperature_unit:fahrenheit"
            )],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:units")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def wind_speed_unit_selector(current: str = 'kmh') -> InlineKeyboardMarkup:
        options = {
            'kmh': '–ö—ñ–ª–æ–º–µ—Ç—Ä–∏/–≥–æ–¥–∏–Ω–∞ (–∫–º/–≥–æ–¥)',
            'ms': '–ú–µ—Ç—Ä–∏/—Å–µ–∫—É–Ω–¥–∞ (–º/—Å)',
            'mph': '–ú–∏–ª—ñ/–≥–æ–¥–∏–Ω–∞ (mph)',
            'kn': '–í—É–∑–ª–∏ (kn)'
        }
        
        keyboard = []
        for unit, label in options.items():
            emoji = "‚úÖ" if current == unit else "‚ö™"
            keyboard.append([InlineKeyboardButton(
                text=f"{emoji} {label}", 
                callback_data=f"set_unit:wind_speed_unit:{unit}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:units")])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    

    @staticmethod
    def timeformat_unit_selector(current: str = 'iso8601') -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(
                text=f"{'‚úÖ' if current == 'iso8601' else '‚ö™'} ISO8601 (2025-09-28T16:55:01Z)", 
                callback_data="set_unit:timeformat:iso8601"
            )],
            [InlineKeyboardButton(
                text=f"{'‚úÖ' if current == 'unixtime' else '‚ö™'} Unix Timestamp (1625097600)", 
                callback_data="set_unit:timeformat:unixtime"
            )],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:units")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def display_settings(settings: Dict[str, bool] = None) -> InlineKeyboardMarkup:
        if not settings:
            settings = {}
        
        def get_emoji(key: str, default: bool = True) -> str:
            return "‚úÖ" if settings.get(key, default) else "‚ùå"
        
        keyboard = [
            [InlineKeyboardButton(text="üìä –©–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –ø–æ–≥–æ–¥—ñ:", callback_data="noop")],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_temperature')} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 
                callback_data="toggle:show_temperature"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_feels_like')} –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫", 
                callback_data="toggle:show_feels_like"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_humidity')} –í–æ–ª–æ–≥—ñ—Å—Ç—å", 
                callback_data="toggle:show_humidity"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_pressure', False)} –¢–∏—Å–∫", 
                callback_data="toggle:show_pressure"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_wind')} –í—ñ—Ç–µ—Ä", 
                callback_data="toggle:show_wind"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_precipitation')} –û–ø–∞–¥–∏", 
                callback_data="toggle:show_precipitation"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_precipitation_probability')} –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤", 
                callback_data="toggle:show_precipitation_probability"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_cloud_cover', False)} –•–º–∞—Ä–Ω—ñ—Å—Ç—å", 
                callback_data="toggle:show_cloud_cover"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_uv_index')} –£–§-—ñ–Ω–¥–µ–∫—Å", 
                callback_data="toggle:show_uv_index"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_visibility', False)} –í–∏–¥–∏–º—ñ—Å—Ç—å", 
                callback_data="toggle:show_visibility"
            )],
            [InlineKeyboardButton(text="üìÖ –î–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑:", callback_data="noop")],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_daily_temperature')} –ú–∞–∫—Å/–º—ñ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 
                callback_data="toggle:show_daily_temperature"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_sunrise_sunset')} –°—Ö—ñ–¥/–∑–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è", 
                callback_data="toggle:show_sunrise_sunset"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_daylight_duration', False)} –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–Ω—è", 
                callback_data="toggle:show_daylight_duration"
            )],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="menu:settings")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def forecast_settings(settings: Dict[str, Any] = None) -> InlineKeyboardMarkup:
        if not settings:
            settings = {'forecast_days': 7, 'past_days': 0}
        
        keyboard = [
            [InlineKeyboardButton(
                text=f"üìÖ –î–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É: {settings.get('forecast_days', 7)}", 
                callback_data="forecast:days"
            )],
            [InlineKeyboardButton(
                text=f"üï∞Ô∏è –ú–∏–Ω—É–ª–∏—Ö –¥–Ω—ñ–≤: {settings.get('past_days', 0)}", 
                callback_data="forecast:past_days"
            )],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="menu:settings")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def forecast_days_selector(current: int = 7) -> InlineKeyboardMarkup:
        keyboard = []
        days_options = [1, 3, 5, 7, 10, 14, 16]
        
        for days in days_options:
            emoji = "‚úÖ" if current == days else "‚ö™"
            text = f"{emoji} {days} {'–¥–µ–Ω—å' if days == 1 else ('–¥–Ω—ñ' if days < 5 else '–¥–Ω—ñ–≤')}"
            keyboard.append([InlineKeyboardButton(
                text=text, 
                callback_data=f"set_forecast:days:{days}"
            )])
        
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:forecast")])
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def notifications_settings(settings: Dict[str, Any] = None) -> InlineKeyboardMarkup:
        if not settings:
            settings = {'notification_enabled': False, 'notification_time': None}

        enabled = settings.get('notification_enabled', False)
        time_text = settings.get('notification_time', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

        keyboard = [
            [InlineKeyboardButton(
                text=f"{'‚úÖ' if enabled else '‚ùå'} –©–æ–¥–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
                callback_data="toggle:notification_enabled"
            )],
            [InlineKeyboardButton(
                text=f"‚è∞ –ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å: {time_text}",
                callback_data="notifications:time"
            )] if enabled else [],
            [InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
                callback_data="notifications:edit_display"
            )],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="menu:settings")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=[row for row in keyboard if row])

    @staticmethod
    def timezone_selector() -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(text="üåê –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ", callback_data="set_timezone:auto")],
            [InlineKeyboardButton(text="üá∫üá¶ –ö–∏—ó–≤ (Europe/Kyiv)", callback_data="set_timezone:Europe/Kyiv")],
            [InlineKeyboardButton(text="üåç GMT", callback_data="set_timezone:GMT")],
            [InlineKeyboardButton(text="üá∫üá∏ –ù—å—é-–ô–æ—Ä–∫", callback_data="set_timezone:America/New_York")],
            [InlineKeyboardButton(text="üá¨üáß –õ–æ–Ω–¥–æ–Ω", callback_data="set_timezone:Europe/London")],
            [InlineKeyboardButton(text="üá©üá™ –ë–µ—Ä–ª—ñ–Ω", callback_data="set_timezone:Europe/Berlin")],
            [InlineKeyboardButton(text="üáØüáµ –¢–æ–∫—ñ–æ", callback_data="set_timezone:Asia/Tokyo")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:location")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def weather_type_menu() -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(text="‚òÄÔ∏è –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞", callback_data="weather:current")],
            [InlineKeyboardButton(text="üìÖ –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data="weather:today")],
            [InlineKeyboardButton(text="üóìÔ∏è –ù–∞ 3 –¥–Ω—ñ", callback_data="weather:3days")],
            [InlineKeyboardButton(text="üìÜ –¢–∏–∂–Ω–µ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data="weather:weekly")],
            [InlineKeyboardButton(text="‚è∞ –ü–æ—á–∞—Å–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data="weather:hourly")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def confirmation_dialog(action: str, item: str) -> InlineKeyboardMarkup:
        keyboard = [
            [
                InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data=f"confirm:{action}:{item}"),
                InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="menu:settings")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def back_button(callback_data: str = "menu:main") -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)
        ]])

    @staticmethod
    def location_input_help() -> InlineKeyboardMarkup:
        keyboard = [
            [InlineKeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", callback_data="location:share")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:location")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    def advanced_display_settings(settings: Dict[str, bool] = None) -> InlineKeyboardMarkup:
        if not settings:
            settings = {}
        
        def get_emoji(key: str, default: bool = False) -> str:
            return "‚úÖ" if settings.get(key, default) else "‚ùå"
        
        keyboard = [
            [InlineKeyboardButton(text="üî¨ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:", callback_data="noop")],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_dew_point')} –¢–æ—á–∫–∞ —Ä–æ—Å–∏", 
                callback_data="toggle:show_dew_point"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_solar_radiation')} –°–æ–Ω—è—á–Ω–∞ —Ä–∞–¥—ñ–∞—Ü—ñ—è", 
                callback_data="toggle:show_solar_radiation"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_sunshine_duration')} –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–æ–Ω—è—á–Ω–æ–≥–æ —Å–≤—ñ—Ç–ª–∞", 
                callback_data="toggle:show_sunshine_duration"
            )],
            [InlineKeyboardButton(
                text=f"{get_emoji('show_current_weather')} –ü–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏", 
                callback_data="toggle:show_current_weather"
            )],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:display")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)


class InlineKeyboards(WeatherKeyboards):
    pass
