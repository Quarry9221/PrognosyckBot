# main.py - –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É –ø–æ–≥–æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞

import asyncio
import logging
import sys
import os
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher
from aiogram.types import Update
from aiogram.fsm.storage.memory import MemoryStorage
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded

from app.config import TELEGRAM_TOKEN, WEBHOOK_PATH, DATABASE_URL
from app.bot.handlers import register_handlers
from app.db.models import Base
from app.db.database import engine, check_database_connection

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(
            os.path.join(LOG_DIR, f"weather_bot.log"), 
            encoding='utf-8'
        )
    ]
)

logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–∏–º —Ü–∏–∫–ª–æ–º –¥–æ–¥–∞—Ç–∫—É (polling only)"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Weather Telegram Bot...")
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
        if not await check_database_connection():
            raise Exception("–ù–µ–º–æ–∂–ª–∏–≤–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω—ñ/–æ–Ω–æ–≤–ª–µ–Ω—ñ")
        # Polling —Ä–µ–∂–∏–º
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —É —Ä–µ–∂–∏–º—ñ polling...")
        await bot.delete_webhook(drop_pending_updates=True)
        asyncio.create_task(start_polling())
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
        raise
    yield
    # –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ
    logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
    try:
        await bot.session.close()
        await engine.dispose()
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω—ñ")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ: {e}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
register_handlers(dp)

# FastAPI –¥–æ–¥–∞—Ç–æ–∫
app = FastAPI(
    title="Weather Telegram Bot",
    description="Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Open-Meteo API",
    version="2.0.0",
    lifespan=lifespan
)

# Rate limiting
limiter = Limiter(key_func=get_remote_address)
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

async def start_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling"""
    try:
        logger.info("üì° –ü–æ—á–∞—Ç–æ–∫ polling...")
        await dp.start_polling(
            bot,
            allowed_updates=["message", "callback_query", "chat_member"],
            skip_updates=True
        )
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ polling: {e}")



@app.get("/")
async def root():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ API"""
    bot_info = await bot.get_me()
    return {
        "message": "Weather Telegram Bot API",
        "version": "2.0.0",
        "bot": {
            "username": bot_info.username,
            "first_name": bot_info.first_name
        },
        "mode": "polling",
        "status": "running"
    }

@app.get("/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ë–î
        db_healthy = await check_database_connection()
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–æ—Ç–∞
        try:
            bot_info = await bot.get_me()
            bot_healthy = True
        except Exception:
            bot_healthy = False
        if db_healthy and bot_healthy:
            return {
                "status": "healthy",
                "database": "connected",
                "bot": "active",
                "mode": "polling"
            }
        else:
            raise HTTPException(status_code=503, detail="Service unhealthy")
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(status_code=503, detail="Service unavailable")



@app.get("/stats")
@limiter.limit("10/minute")
async def get_stats(request: Request):
    """–ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    try:
        from app.db.database import get_session
        from app.db.models import User, UserMessage, BotChat
        from sqlalchemy import func, select
        
        async for session in get_session():
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            users_result = await session.execute(
                select(func.count(User.telegram_id))
            )
            total_users = users_result.scalar() or 0
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            messages_result = await session.execute(
                select(func.count(UserMessage.id))
            )
            total_messages = messages_result.scalar() or 0
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤
            active_chats_result = await session.execute(
                select(func.count(BotChat.id)).where(BotChat.is_active == True)
            )
            active_chats = active_chats_result.scalar() or 0
        
        return {
            "users": {
                "total": total_users
            },
            "messages": {
                "total": total_messages
            },
            "chats": {
                "active": active_chats
            },
            "database": DATABASE_URL.split("://")[0] if DATABASE_URL else "unknown"
        }
    except Exception as e:
        logger.error(f"Stats error: {e}")
        raise HTTPException(status_code=500, detail="Cannot fetch stats")

# Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = asyncio.get_event_loop().time()
    response = await call_next(request)
    process_time = asyncio.get_event_loop().time() - start_time
    
    logger.info(
        f"{request.method} {request.url.path} - "
        f"{response.status_code} - {process_time:.3f}s"
    )
    return response

if __name__ == "__main__":
    import uvicorn
    
    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.getenv("PORT", 8000))
    host = os.getenv("HOST", "0.0.0.0")
    
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}")
    
    logger.info("üîÑ –†–µ–∂–∏–º: Polling")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        app,
        host=host,
        port=port,
        log_level="info",
        access_log=True
    )