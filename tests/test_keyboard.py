import pytest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.keyboards import WeatherKeyboards, InlineKeyboards


class TestMainMenu:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    
    def test_main_menu_structure(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = WeatherKeyboards.main_menu()
        
        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 4
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
        assert len(keyboard.inline_keyboard[0]) == 1
        assert keyboard.inline_keyboard[0][0].text == "üå¶Ô∏è –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞"
        assert keyboard.inline_keyboard[0][0].callback_data == "weather:current"
    
    def test_main_menu_buttons_count(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–Ω–æ–ø–æ–∫"""
        keyboard = WeatherKeyboards.main_menu()
        
        total_buttons = sum(len(row) for row in keyboard.inline_keyboard)
        assert total_buttons == 6
    
    def test_main_menu_callback_data(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö callback_data"""
        keyboard = WeatherKeyboards.main_menu()
        all_callbacks = []
        
        for row in keyboard.inline_keyboard:
            for button in row:
                all_callbacks.append(button.callback_data)
        
        expected = [
            "weather:current",
            "weather:weekly",
            "weather:hourly",
            "menu:settings",
            "action:change_location",
            "action:help"
        ]
        assert all_callbacks == expected


class TestSettingsMenu:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    
    def test_settings_menu_structure(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        keyboard = WeatherKeyboards.settings_menu()
        
        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 7
    
    def test_settings_menu_has_back_button(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
        keyboard = WeatherKeyboards.settings_menu()
        
        last_button = keyboard.inline_keyboard[-1][0]
        assert last_button.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        assert last_button.callback_data == "menu:main"
    
    def test_settings_menu_all_options(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –æ–ø—Ü—ñ–π –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        keyboard = WeatherKeyboards.settings_menu()
        
        expected_texts = [
            "üìç –õ–æ–∫–∞—Ü—ñ—è —Ç–∞ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å",
            "üìè –û–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É",
            "üìä –©–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏",
            "üìÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É",
            "üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
            "üìã –ú–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        ]
        
        actual_texts = [row[0].text for row in keyboard.inline_keyboard]
        assert actual_texts == expected_texts


class TestTemperatureUnitSelector:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –æ–¥–∏–Ω–∏—Ü—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏"""
    
    def test_celsius_selected(self):
        """–¢–µ—Å—Ç –∫–æ–ª–∏ –æ–±—Ä–∞–Ω–æ –¶–µ–ª—å—Å—ñ–π"""
        keyboard = WeatherKeyboards.temperature_unit_selector(current='celsius')
        
        celsius_button = keyboard.inline_keyboard[0][0]
        fahrenheit_button = keyboard.inline_keyboard[1][0]
        
        assert "‚úÖ" in celsius_button.text
        assert "‚ö™" in fahrenheit_button.text
        assert celsius_button.callback_data == "set_unit:temperature_unit:celsius"
    
    def test_fahrenheit_selected(self):
        """–¢–µ—Å—Ç –∫–æ–ª–∏ –æ–±—Ä–∞–Ω–æ –§–∞—Ä–µ–Ω–≥–µ–π—Ç"""
        keyboard = WeatherKeyboards.temperature_unit_selector(current='fahrenheit')
        
        celsius_button = keyboard.inline_keyboard[0][0]
        fahrenheit_button = keyboard.inline_keyboard[1][0]
        
        assert "‚ö™" in celsius_button.text
        assert "‚úÖ" in fahrenheit_button.text
        assert fahrenheit_button.callback_data == "set_unit:temperature_unit:fahrenheit"
    
    def test_has_back_button(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
        keyboard = WeatherKeyboards.temperature_unit_selector()
        
        back_button = keyboard.inline_keyboard[-1][0]
        assert back_button.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        assert back_button.callback_data == "settings:units"


class TestWindSpeedUnitSelector:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –æ–¥–∏–Ω–∏—Ü—å —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ—Ç—Ä—É"""
    
    def test_all_options_present(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –æ–ø—Ü—ñ–π"""
        keyboard = WeatherKeyboards.wind_speed_unit_selector()
        
        # 4 –æ–ø—Ü—ñ—ó + –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        assert len(keyboard.inline_keyboard) == 5
    
    def test_kmh_selected(self):
        """–¢–µ—Å—Ç –∫–æ–ª–∏ –æ–±—Ä–∞–Ω–æ –∫–º/–≥–æ–¥"""
        keyboard = WeatherKeyboards.wind_speed_unit_selector(current='kmh')
        
        kmh_button = keyboard.inline_keyboard[0][0]
        assert "‚úÖ" in kmh_button.text
        assert "–∫–º/–≥–æ–¥" in kmh_button.text
        assert kmh_button.callback_data == "set_unit:wind_speed_unit:kmh"
    
    def test_ms_selected(self):
        """–¢–µ—Å—Ç –∫–æ–ª–∏ –æ–±—Ä–∞–Ω–æ –º/—Å"""
        keyboard = WeatherKeyboards.wind_speed_unit_selector(current='ms')
        
        ms_button = keyboard.inline_keyboard[1][0]
        assert "‚úÖ" in ms_button.text
        assert "–º/—Å" in ms_button.text
    
    def test_all_callback_data(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö callback_data"""
        keyboard = WeatherKeyboards.wind_speed_unit_selector()
        
        expected_units = ['kmh', 'ms', 'mph', 'kn']
        for i, unit in enumerate(expected_units):
            button = keyboard.inline_keyboard[i][0]
            assert button.callback_data == f"set_unit:wind_speed_unit:{unit}"


class TestForecastDaysSelector:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–Ω—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É"""
    
    def test_all_options_present(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –æ–ø—Ü—ñ–π"""
        keyboard = WeatherKeyboards.forecast_days_selector()
        
        # 7 –æ–ø—Ü—ñ–π + –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        assert len(keyboard.inline_keyboard) == 8
    
    def test_current_day_selected(self):
        """–¢–µ—Å—Ç –ø–æ–∑–Ω–∞—á–∫–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É"""
        keyboard = WeatherKeyboards.forecast_days_selector(current=7)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É –∑ 7 –¥–Ω—è–º–∏ (—ñ–Ω–¥–µ–∫—Å –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –ø–æ—Ä—è–¥–∫—É)
        found_selected = False
        for row in keyboard.inline_keyboard[:-1]:  # –ë–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
            button = row[0]
            if "7 –¥–Ω—ñ–≤" in button.text:
                assert "‚úÖ" in button.text
                found_selected = True
                break
        
        assert found_selected, "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç"
    
    def test_days_options(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –¥–Ω—ñ–≤"""
        keyboard = WeatherKeyboards.forecast_days_selector()
        
        expected_days = [1, 3, 5, 7, 10, 14, 16]
        for i, days in enumerate(expected_days):
            button = keyboard.inline_keyboard[i][0]
            assert button.callback_data == f"set_forecast:days:{days}"
    
    def test_correct_word_forms(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —Ñ–æ—Ä–º —Å–ª–æ–≤–∞ '–¥–µ–Ω—å'"""
        keyboard = WeatherKeyboards.forecast_days_selector()
        
        # 1 –¥–µ–Ω—å, 3 –¥–Ω—ñ, 7 –¥–Ω—ñ–≤
        buttons_text = [row[0].text for row in keyboard.inline_keyboard[:-1]]
        
        assert any("1 –¥–µ–Ω—å" in text for text in buttons_text)
        assert any("3 –¥–Ω—ñ" in text for text in buttons_text)
        assert any("7 –¥–Ω—ñ–≤" in text for text in buttons_text)


class TestPastDaysSelector:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –º–∏–Ω—É–ª–∏—Ö –¥–Ω—ñ–≤"""
    
    def test_zero_days_option(self):
        """–¢–µ—Å—Ç –æ–ø—Ü—ñ—ó '–Ω–µ–º–∞—î' –¥–ª—è 0 –¥–Ω—ñ–≤"""
        keyboard = WeatherKeyboards.forecast_past_days_selector(current=0)
        
        zero_button = keyboard.inline_keyboard[0][0]
        assert "‚úÖ" in zero_button.text
        assert "–Ω–µ–º–∞—î" in zero_button.text
        assert zero_button.callback_data == "set_forecast:past_days:0"
    
    def test_all_options(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –æ–ø—Ü—ñ–π"""
        keyboard = WeatherKeyboards.forecast_past_days_selector()
        
        expected_days = [0, 1, 2, 3, 5, 7]
        assert len(keyboard.inline_keyboard) == len(expected_days) + 1  # +1 –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    
    def test_correct_pluralization(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ñ–¥–º—ñ–Ω—é–≤–∞–Ω–Ω—è"""
        keyboard = WeatherKeyboards.forecast_past_days_selector()
        
        buttons_text = [row[0].text for row in keyboard.inline_keyboard[:-1]]
        
        assert any("1 –¥–µ–Ω—å" in text for text in buttons_text)
        assert any("2 –¥–Ω—ñ" in text for text in buttons_text)
        assert any("5 –¥–Ω—ñ–≤" in text for text in buttons_text)


class TestDisplaySettings:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    
    def test_default_settings(self):
        """–¢–µ—Å—Ç –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
        keyboard = WeatherKeyboards.display_settings()
        
        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) > 0
    
    def test_enabled_setting(self):
        """–¢–µ—Å—Ç –∫–æ–ª–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ"""
        settings = {'show_temperature': True}
        keyboard = WeatherKeyboards.display_settings(settings)
        
        # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
        temp_button = None
        for row in keyboard.inline_keyboard:
            if row and "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" in row[0].text:
                temp_button = row[0]
                break
        
        assert temp_button is not None
        assert "‚úÖ" in temp_button.text
        assert temp_button.callback_data == "toggle:show_temperature"
    
    def test_disabled_setting(self):
        """–¢–µ—Å—Ç –∫–æ–ª–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ"""
        settings = {'show_temperature': False}
        keyboard = WeatherKeyboards.display_settings(settings)
        
        temp_button = None
        for row in keyboard.inline_keyboard:
            if row and "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" in row[0].text:
                temp_button = row[0]
                break
        
        assert temp_button is not None
        assert "‚ùå" in temp_button.text
    
    def test_section_headers(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Å–µ–∫—Ü—ñ–π"""
        keyboard = WeatherKeyboards.display_settings()
        
        headers = [row[0].text for row in keyboard.inline_keyboard 
                  if row and row[0].callback_data == "noop"]
        
        assert "–ø–æ—Ç–æ—á–Ω—ñ–π –ø–æ–≥–æ–¥—ñ" in headers[0]
        assert "–î–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑" in headers[1]


class TestNotificationsSettings:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    
    def test_notifications_disabled(self):
        """–¢–µ—Å—Ç –∫–æ–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω—ñ"""
        settings = {'notification_enabled': False}
        keyboard = WeatherKeyboards.notifications_settings(settings)
        
        # –ö–æ–ª–∏ –≤–∏–º–∫–Ω–µ–Ω–æ, –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –∫–Ω–æ–ø–∫–∏ —á–∞—Å—É
        time_buttons = [row for row in keyboard.inline_keyboard 
                       if row and "–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å" in row[0].text]
        
        assert len(time_buttons) == 0
    
    def test_notifications_enabled(self):
        """–¢–µ—Å—Ç –∫–æ–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω—ñ"""
        settings = {'notification_enabled': True, 'notification_time': '08:00'}
        keyboard = WeatherKeyboards.notifications_settings(settings)
        
        # –ö–æ–ª–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ, –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –∫–Ω–æ–ø–∫–∞ —á–∞—Å—É
        time_buttons = [row for row in keyboard.inline_keyboard 
                       if row and "–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å" in row[0].text]
        
        assert len(time_buttons) == 1
        assert "08:00" in time_buttons[0][0].text
    
    def test_enabled_toggle_emoji(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ–º–æ–¥–∑—ñ –¥–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        settings = {'notification_enabled': True}
        keyboard = WeatherKeyboards.notifications_settings(settings)
        
        toggle_button = keyboard.inline_keyboard[0][0]
        assert "‚úÖ" in toggle_button.text
        assert toggle_button.callback_data == "toggle:notification_enabled"
    
    def test_disabled_toggle_emoji(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ–º–æ–¥–∑—ñ –¥–ª—è –≤–∏–º–∫–Ω–µ–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        settings = {'notification_enabled': False}
        keyboard = WeatherKeyboards.notifications_settings(settings)
        
        toggle_button = keyboard.inline_keyboard[0][0]
        assert "‚ùå" in toggle_button.text


class TestTimezoneSelector:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É"""
    
    def test_auto_option_first(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä –π–¥–µ –ø–µ—Ä—à–∏–º"""
        keyboard = WeatherKeyboards.timezone_selector()
        
        first_button = keyboard.inline_keyboard[0][0]
        assert first_button.text == "üåê –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"
        assert first_button.callback_data == "set_timezone:auto"
    
    def test_all_timezones_present(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö —á–∞—Å–æ–≤–∏—Ö –ø–æ—è—Å—ñ–≤"""
        keyboard = WeatherKeyboards.timezone_selector()
        
        expected_timezones = [
            "auto",
            "Europe/Kyiv",
            "GMT",
            "America/New_York",
            "Europe/London",
            "Europe/Berlin",
            "Asia/Tokyo"
        ]
        
        callbacks = [row[0].callback_data.replace("set_timezone:", "") 
                    for row in keyboard.inline_keyboard[:-1]]
        
        assert callbacks == expected_timezones
    
    def test_has_back_button(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
        keyboard = WeatherKeyboards.timezone_selector()
        
        last_button = keyboard.inline_keyboard[-1][0]
        assert last_button.callback_data == "settings:location"


class TestUnitsSettings:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–¥–∏–Ω–∏—Ü—å –≤–∏–º—ñ—Ä—É"""
    
    def test_default_units(self):
        """–¢–µ—Å—Ç –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –æ–¥–∏–Ω–∏—Ü—è–º–∏"""
        keyboard = WeatherKeyboards.units_settings()
        
        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 5
    
    def test_celsius_display(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¶–µ–ª—å—Å—ñ—è"""
        units = {
            'temperature_unit': 'celsius',
            'wind_speed_unit': 'kmh',
            'precipitation_unit': 'mm',
            'timeformat': 'iso8601'
        }
        keyboard = WeatherKeyboards.units_settings(units)
        
        temp_button = keyboard.inline_keyboard[0][0]
        assert "üå°Ô∏èC" in temp_button.text
    
    def test_fahrenheit_display(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞"""
        units = {
            'temperature_unit': 'fahrenheit',
            'wind_speed_unit': 'kmh',
            'precipitation_unit': 'mm',
            'timeformat': 'iso8601'
        }
        keyboard = WeatherKeyboards.units_settings(units)
        
        temp_button = keyboard.inline_keyboard[0][0]
        assert "üå°Ô∏èF" in temp_button.text
    
    def test_wind_speed_units_display(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—å —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ—Ç—Ä—É"""
        units = {
            'temperature_unit': 'celsius',
            'wind_speed_unit': 'ms',
            'precipitation_unit': 'mm',
            'timeformat': 'iso8601'
        }
        keyboard = WeatherKeyboards.units_settings(units)
        
        wind_button = keyboard.inline_keyboard[1][0]
        assert "–º/—Å" in wind_button.text


class TestWeatherTypeMenu:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –º–µ–Ω—é —Ç–∏–ø—ñ–≤ –ø–æ–≥–æ–¥–∏"""
    
    def test_menu_structure(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –º–µ–Ω—é"""
        keyboard = WeatherKeyboards.weather_type_menu()
        
        assert len(keyboard.inline_keyboard) == 6
    
    def test_all_weather_types(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≥–æ–¥–∏"""
        keyboard = WeatherKeyboards.weather_type_menu()
        
        expected_callbacks = [
            "weather:current",
            "weather:today",
            "weather:3days",
            "weather:weekly",
            "weather:hourly",
            "menu:main"
        ]
        
        actual_callbacks = [row[0].callback_data for row in keyboard.inline_keyboard]
        assert actual_callbacks == expected_callbacks


class TestConfirmationDialog:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    
    def test_yes_no_buttons(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –¢–∞–∫/–ù—ñ"""
        keyboard = WeatherKeyboards.confirmation_dialog("delete", "location")
        
        assert len(keyboard.inline_keyboard) == 1
        assert len(keyboard.inline_keyboard[0]) == 2
        
        yes_button = keyboard.inline_keyboard[0][0]
        no_button = keyboard.inline_keyboard[0][1]
        
        assert yes_button.text == "‚úÖ –¢–∞–∫"
        assert no_button.text == "‚ùå –ù—ñ"
    
    def test_callback_data_format(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É callback_data"""
        keyboard = WeatherKeyboards.confirmation_dialog("reset", "settings")
        
        yes_button = keyboard.inline_keyboard[0][0]
        assert yes_button.callback_data == "confirm:reset:settings"


class TestBackButton:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
    
    def test_default_callback(self):
        """–¢–µ—Å—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ callback"""
        keyboard = WeatherKeyboards.back_button()
        
        button = keyboard.inline_keyboard[0][0]
        assert button.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        assert button.callback_data == "menu:main"
    
    def test_custom_callback(self):
        """–¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ callback"""
        keyboard = WeatherKeyboards.back_button("settings:display")
        
        button = keyboard.inline_keyboard[0][0]
        assert button.callback_data == "settings:display"


class TestLocationInputHelp:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏ –∑ –≤–≤–µ–¥–µ–Ω–Ω—è–º –ª–æ–∫–∞—Ü—ñ—ó"""
    
    def test_has_share_button(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é"""
        keyboard = WeatherKeyboards.location_input_help()
        
        share_button = keyboard.inline_keyboard[0][0]
        assert "–≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é" in share_button.text
        assert share_button.callback_data == "location:share"
    
    def test_has_back_button(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
        keyboard = WeatherKeyboards.location_input_help()
        
        back_button = keyboard.inline_keyboard[1][0]
        assert back_button.callback_data == "settings:location"


class TestAdvancedDisplaySettings:
    """–¢–µ—Å—Ç–∏ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    
    def test_default_all_disabled(self):
        """–¢–µ—Å—Ç —â–æ –≤—Å—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –æ–ø—Ü—ñ—ó –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–º–∫–Ω–µ–Ω—ñ"""
        keyboard = WeatherKeyboards.advanced_display_settings()
        
        # –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ - –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for row in keyboard.inline_keyboard[1:-1]:  # –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
            button = row[0]
            if button.callback_data != "noop":
                assert "‚ùå" in button.text
    
    def test_enabled_options(self):
        """–¢–µ—Å—Ç —É–≤—ñ–º–∫–Ω–µ–Ω–∏—Ö –æ–ø—Ü—ñ–π"""
        settings = {
            'show_dew_point': True,
            'show_solar_radiation': True
        }
        keyboard = WeatherKeyboards.advanced_display_settings(settings)
        
        enabled_count = sum(1 for row in keyboard.inline_keyboard 
                          if row and "‚úÖ" in row[0].text)
        
        assert enabled_count == 2


class TestBackwardCompatibility:
    """–¢–µ—Å—Ç–∏ —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç–∞—Ä–∏–º –∫–æ–¥–æ–º"""
    
    def test_inline_keyboards_alias(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ InlineKeyboards –ø—Ä–∞—Ü—é—î —è–∫ alias"""
        keyboard1 = WeatherKeyboards.main_menu()
        keyboard2 = InlineKeyboards.main_menu()
        
        assert keyboard1.inline_keyboard == keyboard2.inline_keyboard
    
    def test_all_methods_available(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –º–µ—Ç–æ–¥—ñ–≤ —á–µ—Ä–µ–∑ alias"""
        methods = [
            'main_menu',
            'settings_menu',
            'temperature_unit_selector',
            'back_button'
        ]
        
        for method in methods:
            assert hasattr(InlineKeyboards, method)


class TestForecastSettings:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–≥–Ω–æ–∑—É"""
    
    def test_default_values(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å"""
        keyboard = WeatherKeyboards.forecast_settings()
        
        # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑ –¥–Ω—è–º–∏ –ø—Ä–æ–≥–Ω–æ–∑—É
        days_button = keyboard.inline_keyboard[0][0]
        assert "7" in days_button.text
        
        # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∑ –º–∏–Ω—É–ª–∏–º–∏ –¥–Ω—è–º–∏
        past_button = keyboard.inline_keyboard[1][0]
        assert "0" in past_button.text
    
    def test_custom_values(self):
        """–¢–µ—Å—Ç –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏"""
        settings = {'forecast_days': 14, 'past_days': 5}
        keyboard = WeatherKeyboards.forecast_settings(settings)
        
        days_button = keyboard.inline_keyboard[0][0]
        past_button = keyboard.inline_keyboard[1][0]
        
        assert "14" in days_button.text
        assert "5" in past_button.text


class TestTimeformatSelector:
    """–¢–µ—Å—Ç–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç—É —á–∞—Å—É"""
    
    def test_iso8601_selected(self):
        """–¢–µ—Å—Ç –∫–æ–ª–∏ –æ–±—Ä–∞–Ω–æ ISO8601"""
        keyboard = WeatherKeyboards.timeformat_unit_selector(current='iso8601')
        
        iso_button = keyboard.inline_keyboard[0][0]
        assert "‚úÖ" in iso_button.text
        assert "ISO8601" in iso_button.text
    
    def test_unixtime_selected(self):
        """–¢–µ—Å—Ç –∫–æ–ª–∏ –æ–±—Ä–∞–Ω–æ Unix Timestamp"""
        keyboard = WeatherKeyboards.timeformat_unit_selector(current='unixtime')
        
        unix_button = keyboard.inline_keyboard[1][0]
        assert "‚úÖ" in unix_button.text
        assert "Unix Timestamp" in unix_button.text
    
    def test_callback_data(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ callback_data"""
        keyboard = WeatherKeyboards.timeformat_unit_selector()
        
        iso_button = keyboard.inline_keyboard[0][0]
        unix_button = keyboard.inline_keyboard[1][0]
        
        assert iso_button.callback_data == "set_unit:timeformat:iso8601"
        assert unix_button.callback_data == "set_unit:timeformat:unixtime"